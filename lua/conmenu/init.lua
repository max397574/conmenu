local menu = require("conmenu.menu")
local worktree = require("conmenu.git-worktree")
local create_cmd = vim.api.nvim_create_user_command
local function setup()
    create_cmd("ConMenu", function()
        menu.open()
    end, {})
    create_cmd("ConMenuNext", function()
        menu.switchItem(1)
    end, {})
    create_cmd("ConMenuPrevious", function()
        menu.switchItem(-1)
    end, {})
    create_cmd("ConMenuConfirm", function()
        menu.executeItem()
    end, {})
    create_cmd("ConMenuClose", function()
        menu.close()
    end, {})
    create_cmd("ConMenuUpdateRender", function()
        menu.updateRender()
    end, {})
    vim.api.nvim_set_hl(0, "KeyHighlight", { default = true, link = "Special" })
    vim.api.nvim_set_hl(0, "InvisibleCursor", { reverse = true, blend = 100 })
    local augroup = vim.api.nvim_create_augroup("ConMenu", {})
    vim.api.nvim_create_autocmd("FileType", {
        pattern = "conmenu",
        group = augroup,
        callback = function()
            vim.keymap.set("n", "<esc>", function()
                menu.close()
            end, { buffer = true })
            vim.keymap.set("n", "q", function()
                menu.close()
            end, { buffer = true })
            vim.keymap.set("n", "j", function()
                menu.switchItem(1)
            end, { buffer = true })
            vim.keymap.set("n", "k", function()
                menu.switchItem(-1)
            end, { buffer = true })
            vim.keymap.set("n", "<c-n>", function()
                menu.switchItem(1)
            end, { buffer = true })
            vim.keymap.set("n", "<c-p>", function()
                menu.switchItem(-1)
            end, { buffer = true })
            vim.keymap.set("n", "<cr>", function()
                menu.executeItem()
            end, { buffer = true })
            vim.cmd([[setlocal guicursor+=a:InvisibleCursor]])
        end,
    })
    vim.api.nvim_create_autocmd({ "BufWipeout", "BufHidden", "BufLeave" }, {
        pattern = "conmenu",
        callback = function()
            vim.cmd([[setlocal guicursor-=a:InvisibleCursor]])
            menu.close()
        end,
    })
    vim.api.nvim_create_autocmd({ "InsertEnter" }, {
        pattern = "conmenu",
        callback = function()
            vim.cmd([[let updaterestore=&updatetime | set updatetime=0]])
        end,
    })
    vim.api.nvim_create_autocmd({ "InsertLeave" }, {
        pattern = "conmenu",
        callback = function()
            vim.cmd([[let &updatetime=updaterestore | :ConMenuUpdateRender]])
        end,
    })
    vim.api.nvim_create_autocmd({ "CursorHoldI" }, {
        pattern = "conmenu",
        callback = function()
            vim.cmd([[stopinsert | normal! gg]])
        end,
    })
    vim.cmd([=[
    " Set default variables
    let g:conmenu#default_menu = get(g:, 'conmenu#default_menu', [])
    " Only these keys will be bound if found in menu item name
    let g:conmenu#available_bindings = get(g:, 'conmenu#available_bindings',  'wertyuiopasdfghlzxcvbnm')
    let g:conmenu#cursor_character = get(g:, 'conmenu#cursor_character',  '>') " ‚óè - You can use a circle if you want?
    let g:conmenu#shortcut_highlight_group = get(g:, 'conmenu#shortcut_highlight_group',  'KeyHighlight')
    let g:conmenu#borders = get(g:, 'conmenu#borders',  'rounded')

    " TODO: Not yet used in lua
    let g:conmenu#close_keys = get(g:, 'conmenu#close_keys',  ['q', '<esc>'])
    let g:conmenu#js#package_manager = get(g:, 'conmenu#js#package_manager',  'yarn')
    ]=])
end

return {
    setup = setup,
    -- User configured
    open = menu.open,
    openCustom = menu.openCustom,
    close = menu.close,

    executeItem = menu.executeItem,
    switchItem = menu.switchItem,

    -- Git Worktree helpers
    createWorktree = worktree.createWorktree,
    removeWorktree = worktree.removeWorktree,
    selectWorktree = worktree.selectWorktree,

    -- Used by bindings generated by this script
    executeItemNum = menu.executeItemNum,
    updateRender = menu.updateRender,
}
